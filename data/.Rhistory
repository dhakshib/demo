# f) Number of storms with winds >= 64 knots (hurricanes).
length(unique(filter(dat, Wind.WMO. >= 64)$Name))
# g) Name of storm with maximum wind speed (and speed value)
summarize(dat, max(Wind.WMO.))
unique(filter(dat, Wind.WMO.==max(Wind.WMO.))$Name)
# h) Name of storm with minimum pressure (and pressure value)
filterPressure <- filter(dat, Press.WMO. >= 0)
summarize(filterPressure, min(Press.WMO.))
unique(filter(filterPressure, Press.WMO.==min(Press.WMO.))$Name)
# i) What is the month with most storms?
table(group_by(dat,Name)$month_str)[which.max(table(group_by(dat,Name)$month_str))]
library(ggplot2)
# 8.1) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the number of records in each month. This means that your barchart should contain as many bars as months in the data.
ggplot(dat, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of Number of Records in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.2) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the storm names in each month. This means that your barchart should contain as many bars as months in the data.
namesPerMonth <- count(group_by(dat, month_str), Name)
ggplot(namesPerMonth, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of the Storm Names in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.3) Make a graphic that allows you to visualize the values of wind speed—i.e. Wind(WMO)—over time for storm JULIA. Hint: try using functions from "lubridate" to extract timedependent values from column ISO_time.
library("scales")
julia <- filter(dat, Name == "JULIA")
ggplot(julia, aes(x = as.POSIXct(ISO_time), y = Wind.WMO.)) +
geom_point() + geom_line() +
scale_x_datetime(breaks = "1 day",labels = date_format("%m/%d")) +
ggtitle("Visualizing Storm JULIA's Wind Speed in 2010") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("Wind.WMO.")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd")
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
View(dat3)
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor(), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor(NULL), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor("NULL"), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor(NULL), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
col_types = list(col_character(), col_integer(), col_character(), col_factor(NULL), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
knitr::opts_chunk$set(echo = TRUE)
# run in console and copy to appropriate location
# origin <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2019/master/data/ibtracs_2010.csv'
# destination <- 'ibtracs_2010.csv'
# download.file(origin, destination)
dat  <- read.table(
"ibtracs_2010.csv",
header = TRUE,
sep=",",
na = c("-999."),
col.names = c("Serial_Num", "Season", "Num", "Basin", "Sub_basin", "Name", "ISO_time", "Nature", "Latitude", "Longitude", "Wind(WMO)", "Press(WMO)"),
colClasses = c("character", "integer", "character", "factor", rep("character", 4), rep("real", 4)))
str(dat)
dat2 <- read.csv(
"ibtracs_2010.csv",
colClasses = c("character", "integer", "NULL", "NULL", "NULL", "character", "NULL", "NULL", rep("real", 2), "NULL", "NULL"))
str(dat2)
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor(), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
str(dat3)
library("lubridate")
# a) Add a new column to dat by applying the function ymd_hms() to the values in ISO_time. Call this new column date_time.
dat <- cbind(dat, date_time = ymd_hms(dat[['ISO_time']]))
# b) Add a new column to dat by applying the function month() to the values in date_time. Call this new column month_num.
dat <- cbind(dat, month_num = month(dat[['date_time']]))
# c) Add a new column to dat by applying the function month() to the values in date_time, but now using the argument label = TRUE. This should return names of months. Call this new column month_str.
dat <- cbind(dat, month_str = month(dat[['date_time']], label = TRUE))
# d) Re-display the structure of dat
str(dat)
library("dplyr")
# a) Total number of storms.
count(count(dat, Name))
# b) Number of storms per hemisphere (north and south).
# North hemisphere:
count(count(filter(dat, Latitude > 0), Name))
# South hemisphere:
count(count(filter(dat, Latitude < 0), Name))
# c) Are there any storms that passed through the equator?
equatorTest <- select(count(filter(dat, Latitude > 0), Name), Name)
equatorTest <- rbind(equatorTest, select(count(filter(dat, Latitude < 0), Name), Name))
length(
equatorTest$Name[duplicated(equatorTest$Name)])
# d) Are there any storm names that appeared repeated in both the north and south hemispheres? If yes, what names?
equatorTest$Name[duplicated(equatorTest$Name)]
# e) Number of storms with winds >= 35 knots (tropical storms).
length(unique(filter(dat, Wind.WMO. >= 35)$Name))
# f) Number of storms with winds >= 64 knots (hurricanes).
length(unique(filter(dat, Wind.WMO. >= 64)$Name))
# g) Name of storm with maximum wind speed (and speed value)
summarize(dat, max(Wind.WMO.))
unique(filter(dat, Wind.WMO.==max(Wind.WMO.))$Name)
# h) Name of storm with minimum pressure (and pressure value)
filterPressure <- filter(dat, Press.WMO. >= 0)
summarize(filterPressure, min(Press.WMO.))
unique(filter(filterPressure, Press.WMO.==min(Press.WMO.))$Name)
# i) What is the month with most storms?
table(group_by(dat,Name)$month_str)[which.max(table(group_by(dat,Name)$month_str))]
library(ggplot2)
# 8.1) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the number of records in each month. This means that your barchart should contain as many bars as months in the data.
ggplot(dat, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of Number of Records in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.2) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the storm names in each month. This means that your barchart should contain as many bars as months in the data.
namesPerMonth <- count(group_by(dat, month_str), Name)
ggplot(namesPerMonth, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of the Storm Names in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.3) Make a graphic that allows you to visualize the values of wind speed—i.e. Wind(WMO)—over time for storm JULIA. Hint: try using functions from "lubridate" to extract timedependent values from column ISO_time.
library("scales")
julia <- filter(dat, Name == "JULIA")
ggplot(julia, aes(x = as.POSIXct(ISO_time), y = Wind.WMO.)) +
geom_point() + geom_line() +
scale_x_datetime(breaks = "1 day",labels = date_format("%m/%d")) +
ggtitle("Visualizing Storm JULIA's Wind Speed in 2010") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("Wind.WMO.")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd")
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
# h) Name of storm with minimum pressure (and pressure value)
summarize(dat, min(Press.WMO.))
unique(filter(dat, Press.WMO.==min(Press.WMO.))$Name)
knitr::opts_chunk$set(echo = TRUE)
# run in console and copy to appropriate location
# origin <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2019/master/data/ibtracs_2010.csv'
# destination <- 'ibtracs_2010.csv'
# download.file(origin, destination)
dat  <- read.table(
"ibtracs_2010.csv",
header = TRUE,
sep=",",
na = c("-999."),
col.names = c("Serial_Num", "Season", "Num", "Basin", "Sub_basin", "Name", "ISO_time", "Nature", "Latitude", "Longitude", "Wind(WMO)", "Press(WMO)"),
colClasses = c("character", "integer", "character", "factor", rep("character", 4), rep("real", 4)))
str(dat)
dat2 <- read.csv(
"ibtracs_2010.csv",
colClasses = c("character", "integer", "NULL", "NULL", "NULL", "character", "NULL", "NULL", rep("real", 2), "NULL", "NULL"))
str(dat2)
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor(), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
str(dat3)
library("lubridate")
# a) Add a new column to dat by applying the function ymd_hms() to the values in ISO_time. Call this new column date_time.
dat <- cbind(dat, date_time = ymd_hms(dat[['ISO_time']]))
# b) Add a new column to dat by applying the function month() to the values in date_time. Call this new column month_num.
dat <- cbind(dat, month_num = month(dat[['date_time']]))
# c) Add a new column to dat by applying the function month() to the values in date_time, but now using the argument label = TRUE. This should return names of months. Call this new column month_str.
dat <- cbind(dat, month_str = month(dat[['date_time']], label = TRUE))
# d) Re-display the structure of dat
str(dat)
library("dplyr")
# a) Total number of storms.
count(count(dat, Name))
# b) Number of storms per hemisphere (north and south).
# North hemisphere:
count(count(filter(dat, Latitude > 0), Name))
# South hemisphere:
count(count(filter(dat, Latitude < 0), Name))
# c) Are there any storms that passed through the equator?
equatorTest <- select(count(filter(dat, Latitude > 0), Name), Name)
equatorTest <- rbind(equatorTest, select(count(filter(dat, Latitude < 0), Name), Name))
length(
equatorTest$Name[duplicated(equatorTest$Name)])
# d) Are there any storm names that appeared repeated in both the north and south hemispheres? If yes, what names?
equatorTest$Name[duplicated(equatorTest$Name)]
# e) Number of storms with winds >= 35 knots (tropical storms).
length(unique(filter(dat, Wind.WMO. >= 35)$Name))
# f) Number of storms with winds >= 64 knots (hurricanes).
length(unique(filter(dat, Wind.WMO. >= 64)$Name))
# g) Name of storm with maximum wind speed (and speed value)
summarize(dat, max(Wind.WMO.))
unique(filter(dat, Wind.WMO.==max(Wind.WMO.))$Name)
# h) Name of storm with minimum pressure (and pressure value)
summarize(dat, min(Press.WMO.))
unique(filter(dat, Press.WMO.==min(Press.WMO.))$Name)
# i) What is the month with most storms?
table(group_by(dat,Name)$month_str)[which.max(table(group_by(dat,Name)$month_str))]
library(ggplot2)
# 8.1) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the number of records in each month. This means that your barchart should contain as many bars as months in the data.
ggplot(dat, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of Number of Records in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.2) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the storm names in each month. This means that your barchart should contain as many bars as months in the data.
namesPerMonth <- count(group_by(dat, month_str), Name)
ggplot(namesPerMonth, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of the Storm Names in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.3) Make a graphic that allows you to visualize the values of wind speed—i.e. Wind(WMO)—over time for storm JULIA. Hint: try using functions from "lubridate" to extract timedependent values from column ISO_time.
library("scales")
julia <- filter(dat, Name == "JULIA")
ggplot(julia, aes(x = as.POSIXct(ISO_time), y = Wind.WMO.)) +
geom_point() + geom_line() +
scale_x_datetime(breaks = "1 day",labels = date_format("%m/%d")) +
ggtitle("Visualizing Storm JULIA's Wind Speed in 2010") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("Wind.WMO.")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd")
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
# h) Name of storm with minimum pressure (and pressure value)
filterNAPressure <- filter(dat, Press.WMO. != "NA")
summarize(filterNAPressure, min(Press.WMO.))
unique(filter(filterNAPressure, Press.WMO.==min(Press.WMO.))$Name)
# g) Name of storm with maximum wind speed (and speed value)
filterNAWind <- filter(dat, Wind.WMO. != "NA")
summarize(filterNAWind, max(Wind.WMO.))
unique(filter(filterNAWind, Wind.WMO.==max(Wind.WMO.))$Name)
knitr::opts_chunk$set(echo = TRUE)
# run in console and copy to appropriate location
# origin <- 'https://raw.githubusercontent.com/ucb-stat133/stat133-fall-2019/master/data/ibtracs_2010.csv'
# destination <- 'ibtracs_2010.csv'
# download.file(origin, destination)
dat  <- read.table(
"ibtracs_2010.csv",
header = TRUE,
sep=",",
na = c("-999."),
col.names = c("Serial_Num", "Season", "Num", "Basin", "Sub_basin", "Name", "ISO_time", "Nature", "Latitude", "Longitude", "Wind(WMO)", "Press(WMO)"),
colClasses = c("character", "integer", "character", "factor", rep("character", 4), rep("real", 4)))
str(dat)
dat2 <- read.csv(
"ibtracs_2010.csv",
colClasses = c("character", "integer", "NULL", "NULL", "NULL", "character", "NULL", "NULL", rep("real", 2), "NULL", "NULL"))
str(dat2)
library(readr)
dat3 <- read_csv("ibtracs_2010.csv",
na = c("-999."),
col_types = list(col_character(), col_integer(), col_character(), col_factor(), col_character(), col_character(), col_character(), col_character(), col_double(), col_double(), col_double(), col_double()))
str(dat3)
library("lubridate")
# a) Add a new column to dat by applying the function ymd_hms() to the values in ISO_time. Call this new column date_time.
dat <- cbind(dat, date_time = ymd_hms(dat[['ISO_time']]))
# b) Add a new column to dat by applying the function month() to the values in date_time. Call this new column month_num.
dat <- cbind(dat, month_num = month(dat[['date_time']]))
# c) Add a new column to dat by applying the function month() to the values in date_time, but now using the argument label = TRUE. This should return names of months. Call this new column month_str.
dat <- cbind(dat, month_str = month(dat[['date_time']], label = TRUE))
# d) Re-display the structure of dat
str(dat)
library("dplyr")
# a) Total number of storms.
count(count(dat, Name))
# b) Number of storms per hemisphere (north and south).
# North hemisphere:
count(count(filter(dat, Latitude > 0), Name))
# South hemisphere:
count(count(filter(dat, Latitude < 0), Name))
# c) Are there any storms that passed through the equator?
equatorTest <- select(count(filter(dat, Latitude > 0), Name), Name)
equatorTest <- rbind(equatorTest, select(count(filter(dat, Latitude < 0), Name), Name))
length(
equatorTest$Name[duplicated(equatorTest$Name)])
# d) Are there any storm names that appeared repeated in both the north and south hemispheres? If yes, what names?
equatorTest$Name[duplicated(equatorTest$Name)]
# e) Number of storms with winds >= 35 knots (tropical storms).
length(unique(filter(dat, Wind.WMO. >= 35)$Name))
# f) Number of storms with winds >= 64 knots (hurricanes).
length(unique(filter(dat, Wind.WMO. >= 64)$Name))
# g) Name of storm with maximum wind speed (and speed value)
filterNAWind <- filter(dat, Wind.WMO. != "NA")
summarize(filterNAWind, max(Wind.WMO.))
unique(filter(filterNAWind, Wind.WMO.==max(Wind.WMO.))$Name)
# h) Name of storm with minimum pressure (and pressure value)
filterNAPressure <- filter(dat, Press.WMO. != "NA")
summarize(filterNAPressure, min(Press.WMO.))
unique(filter(filterNAPressure, Press.WMO.==min(Press.WMO.))$Name)
# i) What is the month with most storms?
table(group_by(dat,Name)$month_str)[which.max(table(group_by(dat,Name)$month_str))]
library(ggplot2)
# 8.1) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the number of records in each month. This means that your barchart should contain as many bars as months in the data.
ggplot(dat, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of Number of Records in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.2) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the storm names in each month. This means that your barchart should contain as many bars as months in the data.
namesPerMonth <- count(group_by(dat, month_str), Name)
ggplot(namesPerMonth, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of the Storm Names in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
# 8.3) Make a graphic that allows you to visualize the values of wind speed—i.e. Wind(WMO)—over time for storm JULIA. Hint: try using functions from "lubridate" to extract timedependent values from column ISO_time.
library("scales")
julia <- filter(dat, Name == "JULIA")
ggplot(julia, aes(x = as.POSIXct(ISO_time), y = Wind.WMO.)) +
geom_point() + geom_line() +
scale_x_datetime(breaks = "1 day",labels = date_format("%m/%d")) +
ggtitle("Visualizing Storm JULIA's Wind Speed in 2010") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Time") + ylab("Wind.WMO.")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd")
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd", lty = 0)
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd", lty = 0.2)
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd", lty = 1)
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd", lty = 0.5)
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd", lty = 0.9)
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
library("maps")
map(fill = TRUE, col = "#a1baa1", bg = "#7aa0bd")
points(dat$Longitude, dat$Latitude, col = "#ffc2c2", cex = .3)
abline(h = 0, col="#7fe7ce", lwd=1, lty=2)
title("Locations of All Storm Records")
View(equatorTest)
# c) Are there any storms that passed through the equator?
equatorTest <- select(count(filter(dat, Latitude > 0), Name), Name)
equatorTest <- rbind(equatorTest, select(count(filter(dat, Latitude < 0), Name), Name))
length(
equatorTest$Name[duplicated(equatorTest$Name)])
# c) Are there any storms that passed through the equator?
filterEquator <- filter(dat, Latitude != "NA")
equatorTest <- select(count(filter(filterEquator, Latitude > 0), Name), Name)
equatorTest <- rbind(equatorTest, select(count(filter(filterEquator, Latitude < 0), Name), Name))
length(
equatorTest$Name[duplicated(equatorTest$Name)])
# 8.1) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the number of records in each month. This means that your barchart should contain as many bars as months in the data.
ggplot(dat, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of Number of Records in Each Month") +
xlab("Month") + ylab("Frequency")
# 8.1) Use "ggplot2" functions to create a barchart to visualize the frequencies (i.e. counts) of the number of records in each month. This means that your barchart should contain as many bars as months in the data.
ggplot(dat, aes(x = month_str)) + geom_bar() +
ggtitle("Frequencies of Number of Records in Each Month") +
theme(plot.title = element_text(hjust = 0.5)) +
xlab("Month") + ylab("Frequency")
library(ggplot2)  # graphics
setwd("~/gitdemo")
read.csv("data/nba2018-players.csv")
dat <- read.csv("data/nba2018-players.csv")
View(dat)
# Use the imported table to create a data frame warriors by selecting
# rows---e.g. filter()---of Golden State Warriors, arranging rows by
# salary in increasing order.
filter(dat, order(salary))
# Use the imported table to create a data frame warriors by selecting
# rows---e.g. filter()---of Golden State Warriors, arranging rows by
# salary in increasing order.
arrange(dat, salary)
# packages
library(dplyr)    # data wrangling
# Use the imported table to create a data frame warriors by selecting
# rows---e.g. filter()---of Golden State Warriors, arranging rows by
# salary in increasing order.
arrange(dat, salary)
# packages
library(dplyr)    # data wrangling
library(ggplot2)  # graphics
# Use read.csv() to import the data nba2018-players.csv in R. Do
# this by specifying a relative path.
dat <- read.csv("data/nba2018-players.csv")
# Use the imported table to create a data frame warriors by selecting
# rows---e.g. filter()---of Golden State Warriors, arranging rows by
# salary in increasing order.
warriors <- arrange(dat, salary)
View(warriors)
# Use the function write.csv() to export (or save) the data frame
# warriors to a data file warriors.csv in the data/ directory. You
# will need to use a relative path to specify the file argument.
# Also, see how to use the argument row.names to avoid including a
# first column of numbers.
write.csv(warriors, row.names = TRUE)
setwd("~/gitdemo/data")
# Use the function write.csv() to export (or save) the data frame
# warriors to a data file warriors.csv in the data/ directory. You
# will need to use a relative path to specify the file argument.
# Also, see how to use the argument row.names to avoid including a
# first column of numbers.
write.csv(warriors, file = "data/warriors.csv" , row.names = FALSE)
# Use the function write.csv() to export (or save) the data frame
# warriors to a data file warriors.csv in the data/ directory. You
# will need to use a relative path to specify the file argument.
# Also, see how to use the argument row.names to avoid including a
# first column of numbers.
write.csv(warriors, file = "data\\warriors.csv" , row.names = FALSE)
ile = "data\\warriors.csv" , row.names = FALSE)
# Use the function write.csv() to export (or save) the data frame
# warriors to a data file warriors.csv in the data/ directory. You
# will need to use a relative path to specify the file argument.
# Also, see how to use the argument row.names to avoid including a
# first column of numbers.
write.csv(warriors, file = "warriors.csv", row.names = FALSE)
# Export the output of str() on the data frame with all the players.
str(dat$player)
ile = '../output/data-structure.txt')
str(dat$player)
sink()
source('~/gitdemo/code/demo-script.R')
# Export the output of str() on the data frame with all the players.
sink(file = "../output/data-structure.txt")
str(dat$player)
sink()
ut\\data-structure.txt")
str(dat$player)
sink()
sink(file = "..\\output\\data-structure.txt")
str(dat$player)
sink()
sink(file = "../output/data-structure.txt")
str(dat$player)
sink()
# Export the output of str() on the data frame with all the players.
sink(file = "./output/data-structure.txt")
str(dat$player)
sink()
# Export the output of str() on the data frame with all the players.
sink(file = "./outputs/data-structure.txt")
str(dat$player)
sink()
# Export the output of str() on the data frame with all the players.
sink(file = "../outputs/data-structure.txt")
str(dat$player)
sink()
# Export the summary() of the entire data frame warriors.
sink("../outputs/summary-warriors.txt")
summary(warriors)
sink()
View(dat)
# Export the summary() of the entire data frame lakers.
sink("../outputs/summary-lakers.txt")
summary(filter(dat, team = "LAL"))
sink()
# Export the summary() of the entire data frame lakers.
sink("../outputs/summary-lakers.txt")
summary(filter(dat, team == "LAL"))
sink()
hist(dat$age, rbinom(600*400),
main = 'Age of NBA Players in 2018'
xlab = 'Age')
hist(dat$age, rbinom(600*400),
main = 'Age of NBA Players in 2018',
xlab = 'Age')
hist(dat$age, rbinom(600,400),
main = 'Age of NBA Players in 2018',
xlab = 'Age')
hist(dat$age,
main = 'Age of NBA Players in 2018',
xlab = 'Age')
jpeg(filename = "../images/histogram-age.jpeg", height = 600, width = 400)
hist(dat$age,
main = 'Age of NBA Players in 2018',
xlab = 'Age')
dev.off()
png(filename = "../images/scatterplot2-height-weight.png",
pointsize = 16)
plot(dat$height, dat$weight, pch = 20,
xlab = 'Height', ylab = 'Height')
dev.off()
png(filename = "../images/scatterplot2-height-weight.png",
pointsize = 16)
plot(dat$height, dat$weight, pch = 20,
xlab = 'Height', ylab = 'Weight')
dev.off()
ggplot(dat, aes(x = height, y = weight)) +
facet_wrap(~ position) +
ggsave(filename = "../images/height_weight_by_position.pdf")
ggplot(dat, aes(x = height, y = weight)) +
ggpoint() +
facet_wrap(~ position) +
ggsave(filename = "../images/height_weight_by_position.pdf")
ggplot(dat, aes(x = height, y = weight)) +
geom_point() +
facet_wrap(~ position) +
ggsave(filename = "../images/height_weight_by_position.pdf")
